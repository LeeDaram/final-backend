<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="CommonSql">
		
	<sql id="storePaginationSql">
               SELECT ROW_NUMBER() OVER (ORDER BY g.store_id ASC) AS row_num,
                    g.store_id as g_store_id,
                    g.user_id,
                    g.INDUSTRY_ID,
                    g.CONTACT,
                    g.STORE_IMAGE,
                    g.AVERAGE_RATING,
                    g.TAKEOUT,
                    g.DELIVERY,
                    g.WIFI,
                    g.PET,
                    g.KID,
                    g.PARKING,
                    b.STORE_NAME,
                    a.store_id as a_store_id,
                    a.main_menu,
                    a.price,
                    i.INDUSTRY_NAME,
                    sg.SIGUNGU_NAME,
                    sd.SIDO_NAME 
               FROM GOOD_PRICE_BUSINESS g
               JOIN BUSINESS_USER b
               ON g.USER_ID = b.USER_ID
               JOIN APPROVAL_MANAGEMENT a
               ON g.store_id = a.store_id
               JOIN INDUSTRY i 
               ON g.INDUSTRY_ID = i.INDUSTRY_ID
               JOIN SIGUNGU sg
               ON b.SIGUNGU_ID = sg.SIGUNGU_ID 
               JOIN SIDO sd
               ON sg.SIDO_ID = sd.SIDO_ID
    </sql>

    
    <sql id="filterPaginationSql">
		SELECT 
			tb.*,
			<if test="data.sort == 0">
				ROW_NUMBER() OVER (ORDER BY like_count DESC, store_name) AS row_num
			</if>
			<if test="data.sort == 1">
				ROW_NUMBER() OVER (ORDER BY average_rating DESC, store_name) AS row_num
			</if>
		FROM (
			SELECT
				gpb.store_id,
				gpb.user_id,
				gpb.INDUSTRY_ID,
				gpb.CONTACT,
				gpb.STORE_IMAGE,
				gpb.AVERAGE_RATING,
				gpb.TAKEOUT,
				gpb.DELIVERY,
				gpb.WIFI,
				gpb.PET,
				gpb.KID,
				gpb.PARKING,
				bu.STORE_NAME,
				bu.ADDRESS,
				bu.LAT,
				bu.LNG,
				i.INDUSTRY_NAME,
				sgg.SIGUNGU_NAME,
				sgg.SIGUNGU_ID ,
				sd.SIDO_NAME,
				am.price,
				am.main_menu,
				(
					SELECT NVL(SUM(LIKE_COUNT), 0) 
					FROM review
					WHERE store_id = gpb.store_id 
				) AS like_count
			FROM user_table ut
			INNER JOIN BUSINESS_USER bu
			ON ut.USER_ID = bu.USER_ID
			INNER JOIN SIGUNGU sgg 
			ON bu.SIGUNGU_ID = sgg.SIGUNGU_ID
			INNER JOIN SIDO sd
			ON sgg.SIDO_ID = sd.SIDO_ID
			INNER JOIN GOOD_PRICE_BUSINESS gpb 
			ON ut.USER_ID = gpb.USER_ID
			INNER JOIN INDUSTRY i 
			ON gpb.INDUSTRY_ID = i.INDUSTRY_ID 
			INNER JOIN APPROVAL_MANAGEMENT am 
			ON gpb.store_id = am.store_id
			<where>
				<if test="data.sidoId != null and data.sidoId != ''">
					AND sd.SIDO_ID = #{data.sidoId}
				</if>
		           
				<if test="data.sidoName != null and data.sidoName != '' and data.sidoName != 'null'">
		           AND sd.SIDO_NAME = #{data.sidoName}
				</if>
		           
		        <if test="data.sigunguId != null and data.sigunguId != ''">
		           AND sgg.SIGUNGU_ID = #{data.sigunguId}
		        </if>
		           
		        <if test="data.sigunguName != null and data.sigunguName != '' and data.sigunguName != 'null' ">
		        	AND sgg.SIGUNGU_NAME = #{data.sigunguName}
		        </if>
		        
		        <if test="data.industryId != null and data.industryId != ''">
		        	AND i.INDUSTRY_ID = #{data.industryId}
		        </if>
		        
		        <if test="data.industryName != null and data.industryName != '' and data.industryName != 'null' ">
		        	AND i.INDUSTRY_NAME = #{data.industryName}
		        </if>
		
				<if test="data.storeName != null and data.storeName.trim() != ''">
                	AND bu.STORE_NAME LIKE '%' || #{data.storeName} || '%'
				</if>
				 
				<if test="data.mainMenu != null and data.mainMenu.trim() != ''">
				 	AND am.MAIN_MENU LIKE '%' || #{data.mainMenu} || '%'
				</if>
		      
		        <if test="data.takeout != null and data.takeout != ''">
		        	AND gpb.TAKEOUT = #{data.takeout}
		        </if>
		        
		        <if test="data.delivery != null and data.delivery != ''">
		        	AND gpb.DELIVERY = #{data.delivery}
		        </if>
		        
		        <if test="data.wifi != null and data.wifi != ''">
		        	AND gpb.WIFI = #{data.wifi}
		        </if>
		        
		        <if test="data.pet != null and data.pet != ''">
		        	AND gpb.PET = #{data.pet}
		        </if>
		        
		        <if test="data.kid != null and data.kid != ''">
		         	AND gpb.KID = #{data.kid}
		        </if>
		        
		        <if test="data.parking != null and data.parking != ''">
		        	AND gpb.PARKING = #{data.parking}
		        </if>
			</where>
		) tb	 
    </sql>
    
    
    <!-- 페이지네이션 조건 -->
    <sql id="paginationWhere">
        <![CDATA[WHERE row_num >= #{pageable.offset} + 1 AND row_num <= #{pageable.offset} + #{pageable.pageSize}]]>
    </sql>
    
    
    <!-- 리뷰 목록 조회 (페이지네이션 포함) -->
    <sql id="reviewBaseQuery">
	    SELECT ROW_NUMBER() OVER (ORDER BY R.CREATED_AT DESC) AS row_num,
               R.REVIEW_ID, 
               R.STORE_ID, 
               R.USER_ID, 
               R.RATING, 
               R.CONTENT, 
               R.REVIEW_MENU, 
               R.REVIEW_PRICE, 
               R.LIKE_COUNT, 
               R.CREATED_AT, 
               BU.STORE_NAME
        FROM REVIEW R
        LEFT JOIN GOOD_PRICE_BUSINESS GPB ON R.STORE_ID = GPB.STORE_ID
        LEFT JOIN USER_TABLE U ON GPB.USER_ID = U.USER_ID
        LEFT JOIN BUSINESS_USER BU ON U.USER_ID = BU.USER_ID
	    WHERE R.USER_ID = #{userId, jdbcType=VARCHAR}
	    
	    <if test="period != 'all'">
	        <if test="period == 'today'">
	            AND TRUNC(R.CREATED_AT) = TRUNC(SYSDATE)
	        </if>
	        <if test="period == '1month'">
	            AND R.CREATED_AT >= ADD_MONTHS(SYSDATE, -1)
	        </if>
	        <if test="period == '3months'">
	            AND R.CREATED_AT >= ADD_MONTHS(SYSDATE, -3)
	        </if>
	        <if test="period == '6months'">
	            AND R.CREATED_AT >= ADD_MONTHS(SYSDATE, -6)
	        </if>
	        <if test="period == '1year'">
	            AND R.CREATED_AT >= ADD_MONTHS(SYSDATE, -12)
	        </if>
	        <if test="period == '3years'">
	            AND R.CREATED_AT >= ADD_MONTHS(SYSDATE, -36)
	        </if>
	    </if>
	</sql>

</mapper>